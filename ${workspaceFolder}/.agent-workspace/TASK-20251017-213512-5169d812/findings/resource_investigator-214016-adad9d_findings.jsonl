{"timestamp": "2025-10-17T21:42:39.370837", "agent_id": "resource_investigator-214016-adad9d", "finding_type": "solution", "severity": "critical", "message": "CONFIRMED: @mcp.resource does NOT wrap functions like @mcp.tool does. Line 2355 is CORRECT as-is. Evidence: FastMCP source code shows @mcp.resource stores the unwrapped function in FunctionResource.fn attribute (resource.py:165) and calls it directly via self.fn(**kwargs) (resource.py:207). Unlike @mcp.tool which wraps in FunctionTool object, @mcp.resource keeps the original function callable. Therefore get_task_resource calling get_real_task_status directly is correct - NO .fn needed.", "data": {"investigation_target": "real_mcp_server.py:2355", "decorator": "@mcp.resource", "function": "get_task_resource", "calls": "get_real_task_status (decorated with @mcp.tool)", "current_code": "result = get_real_task_status(task_id)", "verdict": "CORRECT - no change needed", "evidence": {"resource_decorator_behavior": "@mcp.resource returns FunctionResource.from_function() which stores the unwrapped function", "function_storage": "FunctionResource.fn attribute holds the actual function (resource.py:165)", "function_invocation": "self.fn(**kwargs) calls function directly (resource.py:207)", "comparison_to_tool": "@mcp.tool wraps in FunctionTool object, @mcp.resource does NOT wrap"}, "key_difference": "@mcp.resource functions can call @mcp.tool functions directly without .fn because the resource function itself is NOT wrapped", "conclusion": "Line 2355 needs NO fix. Current code is correct."}}
