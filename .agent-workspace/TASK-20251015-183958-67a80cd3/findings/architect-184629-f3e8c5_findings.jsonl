{"timestamp": "2025-10-15T18:48:12.625089", "agent_id": "architect-184629-f3e8c5", "finding_type": "solution", "severity": "critical", "message": "DESIGN: Project Context Injection System - Auto-detect project language, frameworks, patterns, and testing tools from config files and codebase structure. Inject as explicit PROJECT CONTEXT section in agent prompts. Agents currently work in a vacuum - this gives them the blueprints.", "data": {"design_overview": "Create detect_project_context() function that scans for config files, parses them, and returns structured context. Inject this context into deploy_headless_agent prompt at line ~571 (before orchestration_prompt). Context tells agents what they're working with so they don't make wrong assumptions.", "detection_logic": {"primary_detection_files": {"package.json": {"detects": "JavaScript/TypeScript/Node.js", "parse_for": ["dependencies", "devDependencies", "scripts"]}, "requirements.txt": {"detects": "Python", "parse_for": ["package names to infer frameworks"]}, "pyproject.toml": {"detects": "Python", "parse_for": ["dependencies", "tool sections", "build-system"]}, "go.mod": {"detects": "Go", "parse_for": ["module name", "go version", "dependencies"]}, "Cargo.toml": {"detects": "Rust", "parse_for": ["dependencies", "bin/lib"]}, "pom.xml": {"detects": "Java/Maven", "parse_for": ["dependencies", "plugins"]}, "build.gradle": {"detects": "Java/Kotlin/Gradle", "parse_for": ["dependencies", "plugins"]}, "Gemfile": {"detects": "Ruby", "parse_for": ["gem dependencies"]}, "composer.json": {"detects": "PHP", "parse_for": ["require", "require-dev"]}, "*.csproj": {"detects": "C#/.NET", "parse_for": ["PackageReference", "TargetFramework"]}, "tsconfig.json": {"detects": "TypeScript", "parse_for": ["compilerOptions", "include/exclude"]}}, "framework_detection_patterns": {"Python": {"fastmcp": "FastMCP framework (MCP server)", "django": "Django web framework", "flask": "Flask web framework", "fastapi": "FastAPI web framework", "pytest": "Pytest testing framework", "unittest": "unittest testing framework", "sqlalchemy": "SQLAlchemy ORM", "pydantic": "Pydantic data validation"}, "JavaScript": {"react": "React UI library", "vue": "Vue.js framework", "angular": "Angular framework", "express": "Express.js web framework", "next": "Next.js framework", "jest": "Jest testing framework", "mocha": "Mocha testing framework", "playwright": "Playwright browser automation"}, "TypeScript": {"same as JavaScript": "plus TypeScript compiler"}}, "package_manager_detection": {"package.json + package-lock.json": "npm", "package.json + yarn.lock": "yarn", "package.json + pnpm-lock.yaml": "pnpm", "requirements.txt": "pip", "pyproject.toml": "pip (modern) or poetry/hatch", "go.mod": "go mod", "Cargo.toml": "cargo", "Gemfile": "bundler", "composer.json": "composer"}, "testing_framework_detection": {"look_for_files": ["jest.config.js", "pytest.ini", "phpunit.xml", "go_test.go", "test_*.py", "*_test.go", "*.test.js", "*.spec.js"], "look_in_dependencies": ["jest", "pytest", "mocha", "chai", "junit", "testify", "rspec", "phpunit"]}, "code_patterns_detection": {"scan_strategy": "Read 2-3 sample files to infer naming conventions, code style", "what_to_look_for": ["snake_case vs camelCase", "class-based vs functional", "sync vs async patterns", "error handling style (try/catch vs if err != nil)"], "note": "This is OPTIONAL and may be skipped for speed - focus on language/framework first"}}, "data_structure": {"ProjectContext": {"language": "string (Python|JavaScript|TypeScript|Go|Rust|Java|Ruby|PHP|C#|Unknown)", "frameworks": ["list of detected frameworks with versions if available"], "testing_framework": "string (pytest|jest|go test|etc) or None", "package_manager": "string (npm|pip|cargo|etc) or None", "project_type": "string (web_application|library|cli_tool|mcp_server|etc) inferred from structure", "key_patterns": {"naming_convention": "snake_case|camelCase|PascalCase", "module_system": "ES6|CommonJS|Python packages|etc"}, "config_files_found": ["list of config files that were parsed"], "confidence": "high|medium|low (based on how much was detected)"}}, "context_format_for_prompt": {"section_title": "\ud83c\udfd7\ufe0f PROJECT CONTEXT", "format": "Clear, actionable bullet points", "example": "\ud83c\udfd7\ufe0f PROJECT CONTEXT:\n- Language: Python 3.8+\n- Framework: FastMCP 2.0+ (MCP server development)\n- Testing: pytest with pytest-asyncio\n- Package Manager: pip (pyproject.toml based)\n- Project Type: MCP Server (orchestration system)\n- Code Style: snake_case naming, async/await patterns\n\nIMPLICATIONS FOR YOUR WORK:\n- Follow FastMCP conventions for tool definitions (@mcp.tool decorator)\n- Write async functions where appropriate\n- Add pytest tests to tests/ directory \n- Use snake_case for functions and variables\n- Check pyproject.toml for project dependencies before importing\n\nDO NOT:\n- Assume this is a web application (it's an MCP server)\n- Import libraries not in requirements.txt/pyproject.toml\n- Use JavaScript/Node.js patterns (this is Python)\n- Write synchronous code where async is expected"}, "integration_location": {"file": "real_mcp_server.py", "function": "deploy_headless_agent", "line_number": "~571 (after user prompt, before orchestration_prompt)", "implementation": "1. Call detect_project_context(calling_project_dir) at line ~548\n2. Call format_project_context_prompt(context) to generate prompt section\n3. Inject into agent_prompt at line ~571 between {prompt} and {orchestration_prompt}"}, "function_signatures": {"detect_project_context": "def detect_project_context(project_dir: str) -> Dict[str, Any]", "format_project_context_prompt": "def format_project_context_prompt(context: Dict[str, Any]) -> str"}, "implementation_notes": {"caching": "Cache context per project_dir to avoid re-scanning on every agent deploy (store in registry or memory)", "error_handling": "If detection fails, return minimal context with language='Unknown' - don't block agent deployment", "performance": "Detection should be fast (<500ms) - only read config files, don't scan entire codebase", "extensibility": "Easy to add new languages/frameworks by extending detection_files and framework_patterns dicts"}, "why_this_matters": "Investigators found that agents work in a VACUUM with no project context (finding from investigator-184026-23fb8e). This causes agents to make wrong assumptions about language, frameworks, testing tools. They might try to run npm when it's a Python project, or suggest Jest tests for a Go project. Project context gives agents the basic facts they need to work intelligently.", "alignment_with_findings": {"addresses_gap": "No project context (investigator-184026-23fb8e critical gap #4)", "implements_pattern": "Read-First Development - agents need context BEFORE they start work (investigator-184030-562be4)", "enforces_constraints": "Explicit constraints (DO NOT use wrong language/framework) prevent scope creep (investigator-184032-bcdb12)"}}}
{"timestamp": "2025-10-15T18:49:43.531431", "agent_id": "architect-184629-f3e8c5", "finding_type": "recommendation", "severity": "critical", "message": "IMPLEMENTATION DETAILS: Two functions needed - detect_project_context(project_dir) scans config files and returns structured dict, format_project_context_prompt(context) formats for injection. Add at lines ~250-450, call at line ~548, inject at line ~571. Cache per project_dir in memory dict. Total implementation: ~200 lines of Python.", "data": {"implementation_outline": {"function_1_detect": {"name": "detect_project_context", "location": "Lines ~250-380 (before create_orchestration_guidance_prompt)", "signature": "def detect_project_context(project_dir: str) -> Dict[str, Any]", "implementation_steps": ["1. Check cache first (module-level dict: _project_context_cache = {})", "2. Scan for primary config files (os.path.exists checks)", "3. Parse config files based on type (json.load for package.json, read pyproject.toml, etc)", "4. Extract dependencies and infer frameworks", "5. Detect testing framework from dependencies or config files", "6. Determine package manager from lock files", "7. Infer project_type from structure (check for src/, lib/, tests/, web/, etc)", "8. Return structured dict with all context", "9. Cache result and return"], "parsing_logic": {"pyproject.toml": "Use built-in toml (Python 3.11+) or parse as ini-like for dependencies section", "package.json": "json.load() to get dependencies and devDependencies", "requirements.txt": "Read lines, extract package names (split on ==, >=, etc)", "go.mod": "Read lines, extract module and go version", "simple_detection": "For speed, just check if file exists and extract key info - don't deep parse"}, "return_structure": {"language": "string", "frameworks": "list[str]", "testing_framework": "str or None", "package_manager": "str or None", "project_type": "str", "key_patterns": "dict", "config_files_found": "list[str]", "confidence": "str (high/medium/low)"}, "error_handling": "If any parsing fails, continue with partial context. Never raise exceptions. Worst case: return {'language': 'Unknown', 'confidence': 'low'}"}, "function_2_format": {"name": "format_project_context_prompt", "location": "Lines ~380-450", "signature": "def format_project_context_prompt(context: Dict[str, Any]) -> str", "implementation": "Build formatted string based on context dict", "template": "\ud83c\udfd7\ufe0f PROJECT CONTEXT:\n- Language: {language}\n- Framework: {frameworks}\n- Testing: {testing_framework}\n- Package Manager: {package_manager}\n- Project Type: {project_type}\n\nIMPLICATIONS FOR YOUR WORK:\n{implications based on detected context}\n\nDO NOT:\n{constraints based on context}", "conditional_sections": "If language==Python: add 'Use snake_case', if JavaScript: add 'Use camelCase', etc", "if_unknown": "Return minimal context: 'PROJECT CONTEXT: Unable to detect project details. Search for config files to understand project structure.'"}, "integration_into_deploy": {"step_1": "Line ~548: Add context detection\n  calling_project_dir = os.getcwd()\n  project_context = detect_project_context(calling_project_dir)\n  context_prompt = format_project_context_prompt(project_context)", "step_2": "Line ~571: Inject into agent_prompt\n  agent_prompt = f\"\"\"You are a headless Claude agent...\n  {prompt}\n  \n  {context_prompt}\n  \n  {orchestration_prompt}\n  ...\"\"\""}, "caching_strategy": {"module_level_dict": "_project_context_cache: Dict[str, Dict[str, Any]] = {}", "cache_key": "absolute path of project_dir", "cache_lifetime": "Per-process (cleared on server restart)", "why_cache": "Avoid re-scanning on every agent deploy - especially when deploying multiple agents for same task", "cache_invalidation": "Optional: add timestamp and invalidate after 5 minutes if needed"}, "performance_targets": {"detection_time": "<500ms for typical project", "optimization": "Only read config files, don't scan entire codebase", "file_operations": "Max 5-10 file existence checks, 2-3 file reads"}, "example_implementation_snippet": {"python_example": "def detect_project_context(project_dir: str) -> Dict[str, Any]:\n    # Check cache\n    cache_key = os.path.abspath(project_dir)\n    if cache_key in _project_context_cache:\n        return _project_context_cache[cache_key]\n    \n    context = {\n        'language': 'Unknown',\n        'frameworks': [],\n        'testing_framework': None,\n        'package_manager': None,\n        'project_type': 'unknown',\n        'config_files_found': [],\n        'confidence': 'low'\n    }\n    \n    # Detect Python\n    pyproject_path = os.path.join(project_dir, 'pyproject.toml')\n    if os.path.exists(pyproject_path):\n        context['language'] = 'Python'\n        context['config_files_found'].append('pyproject.toml')\n        try:\n            with open(pyproject_path) as f:\n                # Simple parsing - look for dependencies\n                content = f.read()\n                if 'fastmcp' in content:\n                    context['frameworks'].append('FastMCP')\n                if 'pytest' in content:\n                    context['testing_framework'] = 'pytest'\n                context['package_manager'] = 'pip'\n                context['confidence'] = 'high'\n        except:\n            pass\n    \n    # ... similar for other languages\n    \n    # Cache and return\n    _project_context_cache[cache_key] = context\n    return context"}}, "line_numbers_summary": {"new_functions": "Lines ~250-450 (200 lines)", "module_cache": "Line ~26 (after imports)", "call_detect": "Line ~548 in deploy_headless_agent", "inject_prompt": "Line ~571 in agent_prompt f-string"}, "testing_this_design": {"manual_test": "Deploy agent and check prompt includes PROJECT CONTEXT section", "verify_detection": "Test with different project types (Python, JS, Go)", "verify_caching": "Deploy 2 agents, second should use cache (faster)", "verify_graceful_failure": "Test in directory with no config files - should not crash"}, "coordination_with_other_designs": {"type_specific_prompts": "architect-184624-ab4352 is adding role-specific sections - PROJECT CONTEXT goes BEFORE type-specific", "validation": "architect-184627-99b952 is adding completion validation - context helps validate (e.g. did they use right test framework?)", "wrapper_deletion": "architect-184631-4d6115 recommends deleting wrapper - agreed, focus on prompt improvements"}}}
