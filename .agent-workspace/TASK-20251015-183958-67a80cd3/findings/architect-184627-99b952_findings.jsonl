{"timestamp": "2025-10-15T18:48:16.194638", "agent_id": "architect-184627-99b952", "finding_type": "recommendation", "severity": "critical", "message": "VALIDATION SYSTEM DESIGN for update_agent_progress completion claims - Multi-layer validation approach with workspace evidence checks, type-specific validation rules, and progressive enforcement (warnings \u2192 blocking). Agents cannot just SAY they're done - they must PROVE it.", "data": {"target_function": "update_agent_progress (lines 550-619)", "problem_statement": "Currently accepts status='completed' with ZERO validation. Agents can claim completion without any evidence of work. This is the root cause of premature completions and low-quality outputs.", "design_philosophy": {"core_principle": "Trust but verify - agents must provide EVIDENCE, not just claims", "enforcement_strategy": "Progressive validation: Start with warnings, escalate to blocking for repeat offenders", "validation_layers": "Multiple independent checks - any single failure triggers review"}, "validation_architecture": {"layer_1_workspace_evidence": {"description": "Check if agent actually DID something in the workspace", "checks": ["Files created/modified in workspace (check mtimes vs agent start time)", "Progress entries count (should have multiple updates, not just start/end)", "Findings reported (investigators MUST have findings, builders SHOULD have)", "Output directory not empty (builders/fixers should create artifacts)"], "implementation_location": "Lines 590-603, after updating registry but BEFORE returning success", "failure_action": "WARNING on first offense, BLOCK on subsequent offenses"}, "layer_2_type_specific_validation": {"description": "Different agent types have different completion criteria", "investigator_completion_requirements": {"minimum_findings": 1, "minimum_progress_updates": 3, "required_evidence": "Must have reported at least 1 finding with data", "workspace_check": "findings/{agent_id}_findings.jsonl must exist and be non-empty"}, "builder_completion_requirements": {"minimum_progress_updates": 5, "workspace_check": "output/ directory should contain created files", "file_modification_check": "At least 1 file modified in calling project (not just workspace)", "test_execution_evidence": "Message should mention test results (grep for 'test', 'pass', 'fail')"}, "fixer_completion_requirements": {"minimum_progress_updates": 4, "required_evidence": "Message should describe what was fixed and how it was verified", "reproduction_evidence": "Should have documented reproduction steps in findings", "test_evidence": "Should mention regression test or verification"}, "implementation_location": "New function validate_completion_by_type() called at line ~600", "failure_action": "BLOCK completion if type-specific requirements not met"}, "layer_3_self_reporting_validation": {"description": "Agents must self-report validation metadata in their completion message", "required_metadata_in_message": {"what_was_done": "Summary of actual work performed", "evidence_provided": "References to files created, tests run, findings reported", "verification_performed": "What verification steps were taken", "known_limitations": "What wasn't completed or needs follow-up"}, "message_validation_rules": {"minimum_length": 100, "must_not_contain": ["TODO", "not implemented", "mock", "placeholder"], "should_contain_one_of": ["created", "modified", "tested", "verified", "found", "fixed", "implemented"]}, "implementation_location": "Lines 595-600, validate message content", "failure_action": "REJECT with specific guidance on what's missing"}, "layer_4_progress_pattern_validation": {"description": "Check if agent's progress updates show legitimate work pattern", "suspicious_patterns": ["Only 2 progress updates (start + end) - indicates no intermediate work", "Progress jumped from 0 to 100 in under 2 minutes - too fast", "No status='working' updates, only 'completed' - skipped the work", "Message content repetitive or generic across updates"], "legitimate_patterns": ["Multiple 'working' status updates with increasing progress", "Progress updates at reasonable intervals (not all within seconds)", "Message content shows progression of work", "At least 3-5 minutes elapsed between start and completion"], "implementation_location": "Read progress_file before line 603, analyze pattern", "failure_action": "WARNING with specific pattern violation described"}}, "implementation_plan": {"step_1_add_validation_function": {"location": "Before update_agent_progress, around line 549", "function_signature": "def validate_agent_completion(workspace: str, agent_id: str, agent_type: str, message: str, progress_entries: list) -> dict", "returns": {"valid": "bool - whether completion is legitimate", "confidence": "float 0-1 - how confident we are", "warnings": "list of string - issues found", "blocking_issues": "list of string - critical failures", "evidence_summary": "dict - what evidence was found"}}, "step_2_integrate_into_update_agent_progress": {"location": "Lines 600-603, after registry update", "pseudocode": "if status == 'completed':\n    # Read all progress entries for this agent\n    all_entries = read_progress_file(progress_file)\n    \n    # Run validation\n    validation = validate_agent_completion(workspace, agent_id, agent_type, message, all_entries)\n    \n    if not validation['valid']:\n        if validation['blocking_issues']:\n            # BLOCK completion\n            logger.warning(f\"Blocking premature completion for {agent_id}: {validation['blocking_issues']}\")\n            return {\n                'success': False,\n                'error': 'Completion validation failed',\n                'validation_failures': validation['blocking_issues'],\n                'guidance': 'You must provide evidence of completion. See validation_failures for specific issues.'\n            }\n        elif validation['warnings']:\n            # ALLOW but warn\n            logger.warning(f\"Suspicious completion for {agent_id}: {validation['warnings']}\")\n            # Store warning in registry for future reference\n            agent['completion_warnings'] = validation['warnings']\n    \n    # Store validation results in registry\n    agent['completion_validation'] = {\n        'confidence': validation['confidence'],\n        'evidence_summary': validation['evidence_summary'],\n        'validated_at': datetime.now().isoformat()\n    }"}, "step_3_specific_checks_to_implement": {"workspace_evidence_check": {"code": "# Check for files created/modified\nimport os\nimport glob\n\nagent_start_time = agent.get('started_at')\nworkspace_files = glob.glob(f'{workspace}/**/*', recursive=True)\nmodified_files = [f for f in workspace_files if os.path.isfile(f) and os.path.getmtime(f) > parse_iso_time(agent_start_time)]\n\nif len(modified_files) == 0:\n    blocking_issues.append('No files created or modified in workspace - no evidence of work')"}, "findings_check_for_investigators": {"code": "if agent_type == 'investigator':\n    findings_file = f'{workspace}/findings/{agent_id}_findings.jsonl'\n    if not os.path.exists(findings_file):\n        blocking_issues.append('Investigator must report findings - no findings file found')\n    else:\n        with open(findings_file, 'r') as f:\n            finding_count = len([l for l in f if l.strip()])\n        if finding_count == 0:\n            blocking_issues.append('Investigator must report at least 1 finding')\n        elif finding_count < 3:\n            warnings.append(f'Only {finding_count} findings reported - expected 3+ for thorough investigation')"}, "progress_pattern_check": {"code": "# Analyze progress update pattern\nif len(progress_entries) < 3:\n    warnings.append('Only 2 progress updates (start + end) - suspicious, expected intermediate updates')\n\ntime_elapsed = parse_iso_time(progress_entries[-1]['timestamp']) - parse_iso_time(progress_entries[0]['timestamp'])\nif time_elapsed.total_seconds() < 120:\n    warnings.append(f'Completed in {time_elapsed.total_seconds()}s - suspiciously fast, expected at least 2-3 minutes')\n\nworking_updates = [e for e in progress_entries if e.get('status') == 'working']\nif len(working_updates) == 0:\n    blocking_issues.append('No working status updates - agent never reported progress during work')"}, "message_content_validation": {"code": "if len(message) < 50:\n    blocking_issues.append('Completion message too short - must describe what was completed and how it was verified')\n\nsuspicious_phrases = ['TODO', 'not implemented', 'mock', 'placeholder', 'fake', 'dummy']\nfor phrase in suspicious_phrases:\n    if phrase.lower() in message.lower():\n        blocking_issues.append(f'Message contains \"{phrase}\" - indicates incomplete work')\n\nevidence_keywords = ['created', 'modified', 'tested', 'verified', 'found', 'fixed', 'implemented', 'reported']\nif not any(kw in message.lower() for kw in evidence_keywords):\n    warnings.append('Message lacks evidence keywords - should describe concrete actions taken')"}}}, "enforcement_strategy": {"phase_1_warnings_only": {"description": "First 2 weeks - all validation failures are warnings only", "rationale": "Gather data on false positive rate, tune validation rules", "implementation": "Add flag VALIDATION_ENFORCEMENT_MODE = 'warn' (can be 'warn', 'block', 'off')"}, "phase_2_progressive_enforcement": {"description": "Block obvious failures, warn on suspicious patterns", "rules": {"always_block": ["No progress updates between start and completion", "Investigator with zero findings", "Builder with no files modified", "Message contains TODO/not implemented", "Completed in under 60 seconds"], "warn_but_allow": ["Fewer than 3 progress updates", "Completed in under 3 minutes", "Message shorter than 100 chars", "No type-specific evidence (but general evidence exists)"]}}, "phase_3_full_enforcement": {"description": "After validation rules are tuned, block all failures", "escape_hatch": "Allow agents to override with --force flag in message (logged for review)"}}, "example_validation_results": {"legitimate_completion": {"agent_type": "investigator", "evidence_found": {"findings_count": 5, "progress_updates": 8, "time_elapsed_minutes": 12, "workspace_files_modified": 3, "message_length": 287, "evidence_keywords_found": ["found", "documented", "reported", "analyzed"]}, "validation_result": {"valid": true, "confidence": 0.95, "warnings": [], "blocking_issues": []}}, "suspicious_completion": {"agent_type": "builder", "evidence_found": {"findings_count": 0, "progress_updates": 2, "time_elapsed_minutes": 1.5, "workspace_files_modified": 0, "message_length": 45, "evidence_keywords_found": []}, "validation_result": {"valid": false, "confidence": 0.15, "warnings": ["Only 2 progress updates - no intermediate work shown", "Completed in 90 seconds - suspiciously fast", "Message too short (45 chars) - lacks detail"], "blocking_issues": ["No files modified in workspace - no evidence of work", "Message lacks evidence keywords - doesn't describe what was built"]}, "action": "BLOCKED - agent must provide evidence before completion is accepted"}}, "integration_with_prompts": {"description": "Validation system must be communicated to agents in their prompts", "prompt_section_to_add": "\ud83d\udea8 COMPLETION VALIDATION PROTOCOL:\n\nWhen you call update_agent_progress with status='completed', your completion will be VALIDATED.\n\nVALIDATION CHECKS:\n1. Evidence check: Did you create/modify files? Report findings?\n2. Progress pattern: Did you show intermediate progress, not just start/end?\n3. Message content: Does your message prove you did the work?\n4. Type-specific: {investigator: must have findings | builder: must have artifacts | fixer: must show verification}\n\nIF VALIDATION FAILS: Your completion will be REJECTED and you'll receive specific guidance.\n\nTO PASS VALIDATION:\n- Report progress regularly (not just at start/end)\n- Create tangible outputs (files, findings, test results)\n- Write detailed completion message with evidence\n- Include what was done, how it was verified, and known limitations\n\nExample good completion message:\n'Investigation complete. Created 5 findings documenting authentication flow (lines 245-312 in auth.py), identified 3 security issues (see findings file), and recommended 2 alternative approaches with trade-offs. Verified by reading 8 relevant files and cross-referencing with security best practices.'"}, "monitoring_and_iteration": {"metrics_to_track": ["Completion validation failure rate by agent type", "False positive rate (humans override blocked completions)", "Average confidence score for completed agents", "Most common validation failure reasons"], "tuning_strategy": "Adjust validation thresholds based on metrics. If false positive rate > 10%, loosen rules. If false negative rate > 5%, tighten rules."}}}
